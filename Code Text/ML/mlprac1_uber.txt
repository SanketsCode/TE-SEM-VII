Predict the price of the Uber ride from a given pickup point to the agreed drop-off location.Perform following tasks:1.Pre-process the dataset.2.Identify outliers.3.Check the correlation.4.Implement linear regression and random forest regression models.5.Evaluate the models and compare their respective scores like R2, RMSE, etc.

Dataset link: https://www.kaggle.com/datasets/yasserh/uber-fares-dataset


Code





import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sb





uber = pd.read_csv('/Users/admin/Desktop/7 sem/machine learning/practical/dataset/uber.csv')
uber.head()






uber.info()





uber.describe()





uber.isna().sum()






def replacer(df):
    import pandas as pd
    Q = pd.DataFrame(df.isna().sum(),columns=["CT"])
    W = Q[Q.CT > 0].index
    for i in W:
        if(df[i].dtypes == "object"):
            x = df[i].mode()[0]
            df[i] = df[i].fillna(x)
        else:
            x = df[i].mean()
            df[i] = df[i].fillna(x)






replacer(uber)






uber.isna().sum()





uber_2 = uber.drop(['Unnamed: 0','key'],axis=1)
uber_2.dropna(axis=0,inplace=True)





def haversine (lon_1, lon_2, lat_1, lat_2):
    
    lon_1, lon_2, lat_1, lat_2 = map(np.radians, [lon_1, lon_2, lat_1, lat_2])  #Degrees to Radians
    
    
    diff_lon = lon_2 - lon_1
    diff_lat = lat_2 - lat_1
    

    km = 2 * 6371 * np.arcsin(np.sqrt(np.sin(diff_lat/2.0)**2 + 
                                      np.cos(lat_1) * np.cos(lat_2) * np.sin(diff_lon/2.0)**2))
    
    return km







uber_2['Distance']= haversine(uber_2['pickup_longitude'],uber_2['dropoff_longitude'],
                             uber_2['pickup_latitude'],uber_2['dropoff_latitude'])
uber_2['Distance'] = uber_2['Distance'].astype(float).round(2)    # Round-off Optional






uber_2.head()






sb.boxplot(uber_2["Distance"])






uber_2['zscore'] = ( uber_2.Distance - uber_2.Distance.mean() ) / uber_2.Distance.std()
uber_2.head(5)





uber_2[uber_2['zscore']>3]





uber_2[(uber_2.zscore<-3) | (uber_2.zscore>3)]





df_no_outliers = uber_2[(uber_2.zscore>-3) & (uber_2.zscore<3)]
df_no_outliers.head()




df_no_outliers.shape





uber_2.shape






plt.scatter(uber_2['Distance'], uber_2['fare_amount'])
plt.xlabel("Distance")
plt.ylabel("fare_amount")





uber_2.drop(uber_2[uber_2['Distance'] > 60].index, inplace = True)
uber_2.drop(uber_2[uber_2['Distance'] == 0].index, inplace = True)
uber_2.drop(uber_2[uber_2['fare_amount'] == 0].index, inplace = True)
uber_2.drop(uber_2[uber_2['fare_amount'] < 0].index, inplace = True)





uber_2.drop(uber_2[(uber_2['fare_amount']>100) & (uber_2['Distance']<1)].index, inplace = True )
uber_2.drop(uber_2[(uber_2['fare_amount']<100) & (uber_2['Distance']>100)].index, inplace = True )





uber_2.info()




plt.scatter(uber_2['Distance'], uber_2['fare_amount'])
plt.xlabel("Distance")
plt.ylabel("fare_amount")





uber_2['pickup_datetime'] = pd.to_datetime(uber_2['pickup_datetime'])
uber_2['Year'] = uber_2['pickup_datetime'].apply(lambda time: time.year)
uber_2['Month'] = uber_2['pickup_datetime'].apply(lambda time: time.month)
uber_2['Day'] = uber_2['pickup_datetime'].apply(lambda time: time.day)
uber_2['Day of Week'] = uber_2['pickup_datetime'].apply(lambda time: time.dayofweek)
uber_2['Day of Week_num'] = uber_2['pickup_datetime'].apply(lambda time: time.dayofweek)
uber_2['Hour'] = uber_2['pickup_datetime'].apply(lambda time: time.hour)
day_map = {0:'Mon',1:'Tue',2:'Wed',3:'Thu',4:'Fri',5:'Sat',6:'Sun'}
uber_2['Day of Week'] = uber_2['Day of Week'].map(day_map)
uber_2['counter'] = 1






uber_2['pickup'] = uber_2['pickup_latitude'].astype(str) + "," + uber_2['pickup_longitude'].astype(str)   
uber_2['drop off'] = uber_2['dropoff_latitude'].astype(str) + "," + uber_2['dropoff_longitude'].astype(str)





import seaborn as sns
df_1 = uber_2[['Distance', 'Day of Week_num', 'Hour']].copy()
df_h = df_1.copy()
df_h = df_h.groupby(['Hour', 'Day of Week_num']).mean()
df_h = df_h.unstack(level=0)




fig, ax = plt.subplots(figsize=(24, 7))
sns.heatmap(df_h, cmap="Reds",
           linewidth=0.3, cbar_kws={"shrink": .8})
xticks_labels = ['12 AM', '01 AM', '02 AM ', '03 AM ', '04 AM ', '05 AM ', '06 AM ', '07 AM ', 
                 '08 AM ', '09 AM ', '10 AM ', '11 AM ', '12 PM ', '01 PM ', '02 PM ', '03 PM ',
                 '04 PM ', '05 PM ', '06 PM ', '07 PM ', '08 PM ', '09 PM ', '10 PM ', '11 PM ']
yticks_labels = ['Mon','Tue','Wed','Thu','Fri','Sat','Sun']
plt.xticks(np.arange(24) + .5, labels=xticks_labels)
plt.yticks(np.arange(7) + .5, labels=yticks_labels)
ax.xaxis.tick_top()
title = 'Weekly Uber Rides'.upper()
plt.title(title, fontdict={'fontsize': 25})
plt.show()




plt.figure(figsize=[8,4])
sns.distplot(uber_2['fare_amount'], color='g',hist_kws=dict(edgecolor="black", linewidth=2), bins=30)
plt.title('Target Variable Distribution')
plt.show()





import statistics as st
print("Mean of fare prices is % s "
         % (st.mean(uber_2['fare_amount'])))
print("Median of fare prices is % s "
         % (st.median(uber_2['fare_amount'])))
print("Standard Deviation of Fare Prices is % s "
                % (st.stdev(uber_2['fare_amount'])))





import statistics as st
print("Mean of Distance is % s "
         % (st.mean(uber_2['Distance'])))
print("Median of Distance is % s "
         % (st.median(uber_2['Distance'])))
print("Standard Deviation of Distance is % s "
                % (st.stdev(uber_2['Distance'])))





corr = uber_2.corr()
corr.style.background_gradient(cmap='BuGn')






X = uber_2['Distance'].values.reshape(-1, 1)        #Independent Variable
y = uber_2['fare_amount'].values.reshape(-1, 1)     #Dependent Variable




from sklearn.preprocessing import StandardScaler
std = StandardScaler()
y_std = std.fit_transform(y)
print(y_std)
x_std = std.fit_transform(X)
print(x_std)





from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(x_std, y_std, test_size=0.2, random_state=0)





from sklearn.linear_model import LinearRegression
l_reg = LinearRegression()
l_reg.fit(X_train, y_train)
print("Training set score: {:.2f}".format(l_reg.score(X_train, y_train)))
print("Test set score: {:.7f}".format(l_reg.score(X_test, y_test)))




y_pred = l_reg.predict(X_test)
df = {'Actual': y_test, 'Predicted': y_pred}
from tabulate import tabulate
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))






from sklearn import metrics
print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
#print('Mean Absolute % Error:', metrics.mean_absolute_percentage_error(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))





print(l_reg.intercept_)
print(l_reg.coef_)





plt.subplot(2, 2, 1)
plt.scatter(X_train, y_train, color = 'red')
plt.plot(X_train, l_reg.predict(X_train), color ="blue")
plt.title("Fare vs Distance (Training Set)")
plt.ylabel("fare_amount")
plt.xlabel("Distance")
plt.subplot(2, 2, 2)
plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_train, l_reg.predict(X_train), color ="blue")
plt.ylabel("fare_amount")
plt.xlabel("Distance")
plt.title("Fare vs Distance (Test Set)")
plt.tight_layout()
plt.rcParams["figure.figsize"] = (32,22)
plt.show()






from sklearn.ensemble import RandomForestRegressor
rfc = RandomForestRegressor(random_state=21)
rfc.fit(X_train, y_train)
print("Training set score: {:.2f}".format(rfc.score(X_train, y_train)))
print("Test set score: {:.7f}".format(rfc.score(X_test, y_test)))





y_pred = rfc.predict(X_test)
df = {'Actual': y_test, 'Predicted': y_pred}
from tabulate import tabulate
print(tabulate(df, headers = 'keys', tablefmt = 'psql'))





print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_pred))
print('R2_score:',metrics.r2_score(y_test, y_pred))
print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_pred))
print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_pred)))





plt.subplot(2, 2, 1)
plt.scatter(X_train, y_train, color = 'red')
plt.plot(X_train, rfc.predict(X_train), color ="blue")
plt.title("Fare vs Distance (Training Set)")
plt.ylabel("fare_amount")
plt.xlabel("Distance")
plt.subplot(2, 2, 2)
plt.scatter(X_test, y_test, color = 'red')
plt.plot(X_train, rfc.predict(X_train), color ="blue")
plt.ylabel("fare_amount")
plt.xlabel("Distance")
plt.title("Fare vs Distance (Test Set)")

plt.tight_layout()
plt.rcParams["figure.figsize"] = (32,22)
plt.show()

