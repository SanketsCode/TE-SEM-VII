Implement K-Means clustering/ hierarchical clustering on sales_data_sample.csv dataset. Determine the number of clusters using the elbow method.

Dataset link : https://www.kaggle.com/datasets/kyanyoga/sample-sales-data


Code



import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
%matplotlib inline




warnings.filterwarnings("ignore")




df = pd.read_csv('/Users/admin/Desktop/7 sem/machine learning/practical/dataset/sales_data_sample.csv',encoding='latin-1')




df.head()




sns.distplot(df['QUANTITYORDERED'],bins=30)




sns.histplot(df['SALES'],kde=True)




df.describe()




df.shape




df.plot(x='QTR_ID',y='SALES',kind='box')




plt.figure(figsize=(10,5))
plt.ylim(top=15000)
sns.barplot(x='YEAR_ID',y='SALES',data=df,hue='QTR_ID')




df.columns




df = df[['QUANTITYORDERED', 'PRICEEACH', 'ORDERLINENUMBER',
       'SALES', 'ORDERDATE', 'STATUS', 'QTR_ID', 'MONTH_ID', 'YEAR_ID',
       'PRODUCTLINE', 'MSRP', 'PRODUCTCODE', 'CUSTOMERNAME', 'CITY', 'COUNTRY','DEALSIZE']]




df.isnull().sum()




df['ORDERDATE']=pd.to_datetime(df['ORDERDATE'])




df.info()




plt.figure(figsize=(20,8))
sns.lineplot(x='ORDERDATE', y='SALES', data=df)




plt.figure(figsize=(20,8))
sns.boxplot(x='MONTH_ID', y='SALES', data=df)




df.columns



plt.figure(figsize=(15,5))
plt.tight_layout()
sns.barplot(x='PRODUCTLINE',y='SALES',data=df)




plt.figure(figsize=(14,8))
sns.heatmap(df.corr(),annot=True,cmap='viridis')




df.drop(['ORDERLINENUMBER','MONTH_ID','YEAR_ID','PRODUCTCODE','CUSTOMERNAME',
         'CITY','STATUS','DEALSIZE','ORDERDATE','QTR_ID'],axis=1,inplace=True)




df.head()




from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()
df['PRODUCTLINE'] = le.fit_transform(df['PRODUCTLINE'])
df['COUNTRY'] = le.fit_transform(df['COUNTRY'])




df = pd.get_dummies(data=df,columns=['PRODUCTLINE', 'COUNTRY'])




X = df.drop('SALES',axis=1)




y=df['SALES']




from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.30, random_state=101)




from sklearn.linear_model import LinearRegression
lm = LinearRegression()




lm.fit(X_train,y_train)




y_pred = lm.predict(X_test)




sns.scatterplot(x=y_test,y=y_pred)




print('Training Score :',lm.score(X_train, y_train))
print('Test Score     :',lm.score(X_test, y_test))






